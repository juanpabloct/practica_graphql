generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Generate 
generator nestgraphql {
  provider               = "prisma-nestjs-graphql"
  output                 = "../src/@generated/prisma-nestjs-graphql"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

//Models person

model User {
  id         Int          @id @default(autoincrement())
  /// @Validator.IsEmail()
  email      String       @unique
  /// @Validator.IsString()
  /// @Validator.MinLength(7)
  password   String
  /// @Validator.IsOptional()
  active     Boolean      @default(false)
  RolAnduser RolAnduser[]
}

enum Roles {
  ADMIN
  USER
}

model Rol {
  id               Int             @id @default(autoincrement())
  /// @Validator.MinLength(1)
  name             Roles           @unique @default(USER)
  RolesAndPermisos RolAndPermiso[]
  RolAnduser       RolAnduser[]
}

model RolAndPermiso {
  id        Int      @id @default(autoincrement())
  Rol       Rol?     @relation(fields: [rolId], references: [id])
  ///@Validator.IsNumber()
  rolId     Int?
  ///@Validator.IsNumber()
  permisoId Int?
  Permiso   Permiso? @relation(fields: [permisoId], references: [id])
}

model Permiso {
  id               Int             @id @default(autoincrement())
  /// @Validator.MinLength(3)
  /// @Validator.IsString()
  name             Permisions      @unique @default(READ)
  RolesAndPermisos RolAndPermiso[]
}

enum Permisions {
  CREATE
  UPDATE
  DELETE
  READ
  READ_ALL
  READ_ANY
}

model RolAnduser {
  id     Int  @id @default(autoincrement())
  User   User @relation(fields: [userId], references: [id])
  userId Int
  rol    Rol  @relation(fields: [rolId], references: [id])
  rolId  Int
}

//Models product Store and Bodega

model Productos {
  id           Int                    @id @unique @default(autoincrement())
  /// @Validator.MinLength(3)
  /// @Validator.IsString()
  name         String                 @unique
  /// @Validator.IsNumber()
  precio       Int
  BodegaTienda BodegaTiendaProducto[]
  Venta        Venta[]
}

model Tienda {
  id           Int                    @id @unique @default(autoincrement())
  /// @Validator.MinLength(3)
  /// @Validator.IsString()
  name         String                 @unique
  BodegaTienda BodegaTiendaProducto[]
}

model Bodega {
  id           Int                    @id @unique @default(autoincrement())
  /// @Validator.MinLength(3)
  /// @Validator.IsString()
  name         String                 @unique @default(cuid())
  BodegaTienda BodegaTiendaProducto[]
}

model BodegaTiendaProducto {
  id         Int       @id @unique @default(autoincrement())
  productoId Int
  tiendaId   Int
  cantidad   Int       @default(0)
  producto   Productos @relation(fields: [productoId], references: [id])
  tienda     Tienda    @relation(fields: [tiendaId], references: [id])
  Bodega     Bodega    @relation(fields: [bodegaId], references: [id])
  bodegaId   Int
}

model Facturas {
  id    Int     @id @default(autoincrement())
  name  String
  Venta Venta[]
}

model Venta {
  id          Int       @id @default(autoincrement())
  facturaId   Facturas? @relation(fields: [facturasId], references: [id])
  facturasId  Int?
  productoId  Productos @relation(fields: [productosId], references: [id])
  productosId Int
}
